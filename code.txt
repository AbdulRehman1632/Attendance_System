======================================login waste code start=================================

// const handleSubmit = async (e) => {
//   e.preventDefault();
//   setLoading(true);

//   try {
//     const res = await signInWithEmailAndPassword(auth, email, password);
//     toast.success('Login successful!');

//     const user = res.user;
//     const username = user.displayName || email.split('@')[0];
//     const now = new Date();
//     const todayDate = now.toISOString().slice(0, 10);
//     const currentTime = now.toLocaleTimeString('en-GB', { hour12: false });

//     const userDocRef = doc(db, 'allUsers', username);
//     const userDocSnap = await getDoc(userDocRef);

//     let lastLoginDate;
//     let isFirstLogin = false;

//     if (userDocSnap.exists()) {
//       const data = userDocSnap.data();
//       if (data.lastLogin?.toDate) {
//         lastLoginDate = data.lastLogin.toDate();
//       } else {
//         isFirstLogin = true;
//       }
//     } else {
//       isFirstLogin = true;
//     }

//     // Update login time
//     await setDoc(userDocRef, {
//       name: username,
//       lastLogin: serverTimestamp()
//     }, { merge: true });

//     const attendanceRef = collection(db, 'allUsers', username, 'attendance');

//     // 🚫 Agar first login hai, pechlay dino ko skip karo
//     if (!isFirstLogin) {
//       const startDate = new Date(lastLoginDate);
//       startDate.setHours(0, 0, 0, 0);

//       const endDate = new Date();
//       endDate.setHours(0, 0, 0, 0);

//       for (
//         let d = new Date(startDate);
//         d <= endDate;
//         d.setDate(d.getDate() + 1)
//       ) {
//         const dateStr = d.toISOString().slice(0, 10);

//         const attendanceQuery = query(attendanceRef, where("date", "==", dateStr));
//         const attendanceSnap = await getDocs(attendanceQuery);

//         if (!attendanceSnap.empty) continue;

//         const leaveQuery = query(attendanceRef, where("date", "==", dateStr), where("leave", "==", true));
//         const leaveSnap = await getDocs(leaveQuery);

//         let present = false;
//         let leave = false;
//         let time = null;

//         if (!leaveSnap.empty) {
//           present = null;
//           leave = true;
//         } else if (dateStr === todayDate) {
//           present = true;
//           time = currentTime;
//         }

//         await addDoc(attendanceRef, {
//           date: dateStr,
//           present,
//           leave,
//           time,
//           timestamp: serverTimestamp(),
//         });

//         console.log(`✅ Marked: ${dateStr}, present: ${present}, leave: ${leave}`);
//       }
//     } else {
//       // Sirf aaj ki attendance mark karo
//       await addDoc(attendanceRef, {
//         date: todayDate,
//         present: true,
//         leave: false,
//         time: currentTime,
//         timestamp: serverTimestamp(),
//       });

//       console.log(`✅ First login - Marked only today as present: ${todayDate}`);
//     }


//     setTimeout(() => {
//       navigate('/Dashboard');
//     }, 2000);

//   } catch (error) {
//     toast.error('Login failed! Please check your credentials.');
//     console.error(error);
//   } finally {
//     setLoading(false);
//   }
// };

======================================login waste code  end=================================




=========================================login Inner start ==========================================


// const userDocRef = doc(db, 'allUsers', username);
// const userDocSnap = await getDoc(userDocRef);

// let lastLoginDate;
// let lastLoginDateStr = null;
// let hasLastLogin = false;

// if (userDocSnap.exists()) {
//   const data = userDocSnap.data();
//   if (data.lastLogin?.toDate) {
//     lastLoginDate = data.lastLogin.toDate();
//     lastLoginDateStr = lastLoginDate.toISOString().slice(0, 10);
//     hasLastLogin = true;
//   }
// }

// // ✅ Update last login timestamp
// await setDoc(userDocRef, {
//   name: username,
//   lastLogin: serverTimestamp()
// }, { merge: true });

// // ✅ Always mark today (if not already)
// const attendanceRef = collection(db, 'allUsers', username, 'attendance');
// const todaySnap = await getDocs(query(attendanceRef, where("date", "==", todayDate)));
// if (todaySnap.empty) {
//   await addDoc(attendanceRef, {
//     date: todayDate,
//     present: true,
//     leave: false,
//     time: currentTime,
//     timestamp: serverTimestamp(),
//   });
//   console.log(`✅ Marked today as present: ${todayDate}`);
// }

// // ✅ Kal ki attendance sirf agar:
// // 1. lastLogin hai, aur
// // 2. lastLogin ≠ today
// if (hasLastLogin && lastLoginDateStr !== todayDate) {
//   const yesterday = new Date();
//   yesterday.setDate(yesterday.getDate() - 1);
//   const yesterdayDate = yesterday.toISOString().slice(0, 10);

//   const ySnap = await getDocs(query(attendanceRef, where("date", "==", yesterdayDate)));
//   if (ySnap.empty) {
//     const leaveSnap = await getDocs(
//       query(attendanceRef, where("date", "==", yesterdayDate), where("leave", "==", true))
//     );

//     const day = yesterday.getDay(); // 0 = Sunday
//     if (leaveSnap.empty) {
//       if (day === 0) {
//         await addDoc(attendanceRef, {
//           date: yesterdayDate,
//           present: null,
//           leave: false,
//           holiday: true,
//           time: null,
//           timestamp: serverTimestamp(),
//         });
//         console.log(`📅 ${yesterdayDate} was Sunday, marked as holiday.`);
//       } else {
//         await addDoc(attendanceRef, {
//           date: yesterdayDate,
//           present: false,
//           leave: false,
//           holiday: false,
//           time: null,
//           timestamp: serverTimestamp(),
//         });
//         console.log(`❌ ${yesterdayDate} was absent.`);
//       }
//     }
//   }
// }


//     setTimeout(() => {
//       navigate('/Dashboard');
//     }, 2000);


=========================================login Inner end ==========================================



=======================================user detail code start=======================================




// import React, { useEffect, useState } from 'react';
// import { useParams, useNavigate } from 'react-router-dom';
// import {
//   collection, getDocs, getFirestore, query, orderBy
// } from 'firebase/firestore';
// import { app } from '../../firebase';
// import {
//   Button, Table, TableBody, TableCell, TableContainer, TableHead,
//   TableRow, Paper, Typography, Pagination,
//   TextField,
//   Box
// } from '@mui/material';
// import * as XLSX from 'xlsx';
// import { saveAs } from 'file-saver';

// const UserDetails = () => {
//   const { userId } = useParams();
//   const navigate = useNavigate();
//   const db = getFirestore(app);

//   const [attendanceData, setAttendanceData] = useState([]);
//   const [loading, setLoading] = useState(true);
//   const [page, setPage] = useState(1);
//   const [searchText, setSearchText] = useState('');
// const [allData, setAllData] = useState([]); // Firebase se laaoge
// const [filteredData, setFilteredData] = useState([]);
//   const rowsPerPage = 8;

//   useEffect(() => {
//     const fetchAttendance = async () => {
//       try {
//         const attendanceRef = collection(db, 'allUsers', userId, 'attendance');
//         // const q = query(attendanceRef, orderBy('timestamp', 'desc'));
//         const q = query(attendanceRef, orderBy('date'));
//         const snapshot = await getDocs(q);
//         const data = snapshot.docs.map(doc => ({
//           id: doc.id,
//           ...doc.data()
//         }));
//          setAttendanceData(data);
//       setAllData(data);          // Set full data
//       setFilteredData(data);  
//       } catch (error) {
//         console.error('Error fetching attendance:', error);
//       } finally {
//         setLoading(false);
//       }
//     };

//     fetchAttendance();
//   }, [db, userId]);



//   const getWorkingHours = (date, time, logoutTime) => {
//   if (!time || !logoutTime) return '-';

//   const start = new Date(`${date}T${time}`);
//   const end = new Date(`${date}T${logoutTime}`);

//   const diffMs = end - start;
//   if (isNaN(diffMs) || diffMs <= 0) return '-';

//   const totalMinutes = Math.floor(diffMs / 1000 / 60);
//   const hours = Math.floor(totalMinutes / 60);
//   const minutes = totalMinutes % 60;

//   return `${hours}h ${minutes}m`;
// };


// // const getDayName = (dateString) => {
// //   const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
// //   const date = new Date(dateString);
// //   return isNaN(date) ? '-' : days[date.getDay()];
// // };


// const getDayName = (dateString) => {
//   const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
//   const date = new Date(`${dateString}T00:00:00`);
//   return isNaN(date) ? '-' : days[date.getDay()];
// };

// const totalDays = attendanceData.length;

// const presentCount = attendanceData.filter(item => item.present === true).length;

// const absentCount = attendanceData.filter(
//   item => !item.present && !item.leave && getDayName(item.date) !== 'Sunday'
// ).length;

// const leaveCount = attendanceData.filter(item => item.leave === true).length;

// const totalWorkingMinutes = attendanceData.reduce((total, item) => {
//   if (!item.time || !item.logoutTime) return total;

//   const start = item.time.toDate ? item.time.toDate() : new Date(`${item.date}T${item.time}`);
//   const end = item.logoutTime.toDate ? item.logoutTime.toDate() : new Date(`${item.date}T${item.logoutTime}`);

//   const diffMinutes = (end - start) / (1000 * 60);
//   return diffMinutes > 0 ? total + diffMinutes : total;
// }, 0);

// const totalHours = Math.floor(totalWorkingMinutes / 60);
// const totalMinutes = Math.round(totalWorkingMinutes % 60);

// const totalWorkingHoursFormatted = `${totalHours}h ${totalMinutes}m`;



// // ======================export to excel========================================

//   const handleExport = () => {
//     const exportData = attendanceData.map((item, index) => ({
//       Sno: index + 1,
//       Date: item.date,
//       ReportingTime: item.time?.toDate ? item.time.toDate().toLocaleTimeString() : item.time,
//       Present: item.present ? 'Yes' : 'No'
//     }));
//     const worksheet = XLSX.utils.json_to_sheet(exportData);
//     const workbook = XLSX.utils.book_new();
//     XLSX.utils.book_append_sheet(workbook, worksheet, 'Attendance');
//     const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
//     saveAs(new Blob([excelBuffer], { type: 'application/octet-stream' }), 'attendance.xlsx');
//   };

// // ======================export to excel========================================


// // =======================================Search Filter===============================
// useEffect(() => {
//   if (!searchText) {
//     setFilteredData(allData);
//     return;
//   }

//   const keywords = searchText
//     .split(',')
//     .map(k => k.trim().toLowerCase())
//     .filter(k => k.length > 0);

//   const filtered = allData.filter(row => {
//     const dayName = getDayName(row.date)?.toLowerCase() || '';
//     const date = String(row.date || '').toLowerCase();
//     const time = row.time?.toDate 
//       ? row.time.toDate().toLocaleTimeString().toLowerCase() 
//       : String(row.time || '').toLowerCase();
//     const logoutTime = row.logoutTime?.toDate 
//       ? row.logoutTime.toDate().toLocaleTimeString().toLowerCase() 
//       : String(row.logoutTime || '').toLowerCase();
//     const city = String(row.city || '').toLowerCase();

//     const statusText =
//       dayName === 'sunday'
//         ? 'holiday'
//         : row.present
//         ? 'yes'
//         : row.leave
//         ? 'leave'
//         : 'no';

//     return keywords.some(keyword =>
//       dayName.includes(keyword) ||
//       date.includes(keyword) ||
//       time.includes(keyword) ||
//       logoutTime.includes(keyword) ||
//       city.includes(keyword) ||
//       statusText.includes(keyword)
//     );
//   });

//   setFilteredData(filtered);
// }, [searchText, allData]);

// // =======================================Search Filter===============================



//   const handlePageChange = (_, value) => {
//     setPage(value);
//   };

// const paginatedData = filteredData.slice((page - 1) * rowsPerPage, page * rowsPerPage);

//   if (loading) return <p>Loading attendance...</p>;

//   return (
//     <div style={{ marginTop: 20, maxWidth: 800, marginLeft: 'auto', marginRight: 'auto' }}>
//       <div style={{ textAlign: 'center', marginBottom: '16px' }}>
//  <Typography variant="h6" sx={{marginBottom:"10px",fontSize:"1.3em"}}>
//   Attendance Details of{' '}
//   <Typography component="span" sx={{ color: '#966819', fontWeight: 'bold',fontSize:"1.2em" }}>
//     {userId.charAt(0).toUpperCase() + userId.slice(1)}
//   </Typography>
// </Typography>

//   <Button
//     variant="contained"
//     color="secondary"
//     onClick={() => navigate(-1)}
//     sx={{ mb: 2, mx: 1 }}
//   >
//     Back to Dashboard
//   </Button>

//   <Button
//     variant="contained"
//     color="success"
//     onClick={handleExport}
//     sx={{ mb: 2, mx: 1 }}
//   >
//     Export to Excel
//   </Button>
// </div>

//       {attendanceData.length === 0 ? (
//         <p>No attendance data found.</p>
//       ) : (
//         <>

//         <div style={{ display: 'flex', flexWrap: 'wrap', gap: '16px', justifyContent: 'center', marginBottom: '24px' }}>
//   <Paper elevation={3} sx={{ p: 2, minWidth: 150, textAlign: 'center' }}>
//     <Typography variant="subtitle1">Total Days</Typography>
//     <Typography variant="h6">{totalDays}</Typography>
//   </Paper>
//   <Paper elevation={3} sx={{ p: 2, minWidth: 150, textAlign: 'center' }}>
//     <Typography variant="subtitle1">Present</Typography>
//     <Typography variant="h6" color="green">{presentCount}</Typography>
//   </Paper>
//   <Paper elevation={3} sx={{ p: 2, minWidth: 150, textAlign: 'center' }}>
//     <Typography variant="subtitle1">Absent</Typography>
//     <Typography variant="h6" color="red">{absentCount}</Typography>
//   </Paper>
//   <Paper elevation={3} sx={{ p: 2, minWidth: 150, textAlign: 'center' }}>
//     <Typography variant="subtitle1">Leave</Typography>
//     <Typography variant="h6" color="orange">{leaveCount}</Typography>
//   </Paper>
//   <Paper elevation={3} sx={{ p: 2, minWidth: 180, textAlign: 'center' }}>
//     <Typography variant="subtitle1">Working Hours</Typography>
//     <Typography variant="h6">{totalWorkingHoursFormatted}</Typography>
//   </Paper>
// </div>


// <Box sx={{display: 'flex', flexDirection: 'column', alignItems: 'center', }}>

// <TextField
//   label="Search"
//   variant="outlined"
//   size="small"
//   value={searchText}
//   onChange={(e) => setSearchText(e.target.value)}
//   placeholder="Search by attendance , date , day , time"
//   sx={{ mb: 2,width:"100%",maxWidth:400}}
// />
// </Box>

//           <TableContainer component={Paper}>
//             <Table>
//               <TableHead>
//                 <TableRow>
//                   <TableCell sx={{fontWeight:"bold",fontSize:"1em"}}>S.No</TableCell>
//                   <TableCell sx={{fontWeight:"bold",fontSize:"1em"}}>Date</TableCell>
//                   <TableCell sx={{fontWeight:"bold", fontSize:"1em"}}>Day</TableCell>
//                   <TableCell sx={{fontWeight:"bold",fontSize:"1em"}}>Reporting Time</TableCell>
//                   <TableCell sx={{fontWeight:"bold",fontSize:"1em"}}>Off Time</TableCell>
//                   <TableCell sx={{fontWeight:"bold",fontSize:"1em"}}>Working Hours</TableCell>
//                   <TableCell sx={{fontWeight:"bold",fontSize:"1em"}}>Present</TableCell>
//                 </TableRow>
//               </TableHead>
//               <TableBody>
//                 {paginatedData.map((item, index) => (
//                   // console.log(item.timestamp)

                  
//                   <TableRow key={item.id}>
//                     <TableCell>{(page - 1) * rowsPerPage + index + 1}</TableCell>
//                     <TableCell>{item.date}</TableCell>
//                     <TableCell>{getDayName(item.date)}</TableCell>
//                     <TableCell>
//   {item.time ? (item.time.toDate ? item.time.toDate().toLocaleTimeString() : item.time) : '-'}
// </TableCell>
// <TableCell>
//   {item.logoutTime ? (item.logoutTime.toDate ? item.logoutTime.toDate().toLocaleTimeString() : item.logoutTime) : '-'}
// </TableCell>


// <TableCell>
//   {getWorkingHours(item.date, item.time, item.logoutTime)}
// </TableCell>

//                   <TableCell
//   sx={{
//     color:
//       getDayName(item.date) === 'Sunday'
//         ? '#3388FF'
//         : item.present
//         ? 'inherit'
//         : item.leave
//         ? 'orange'
//         : 'red',
//     fontWeight: getDayName(item.date) === 'Sunday' || item.present ? 'normal' : 'bold'
//   }}
// >
//   {getDayName(item.date) === 'Sunday'
//     ? 'Holiday'
//     : item.present
//     ? 'Yes'
//     : item.leave
//     ? 'Leave'
//     : 'No'}
// </TableCell>
//                   </TableRow>
//                 ))}
//               </TableBody>
//             </Table>
//           </TableContainer>

//           <Pagination
//             count={Math.ceil(attendanceData.length / rowsPerPage)}
//             page={page}
//             onChange={handlePageChange}
//             color="primary"
//             sx={{ mt: 2, display: 'flex', justifyContent: 'center' }}
//           />
//         </>
//       )}
//     </div>
//   );
// };

// export default UserDetails;


=======================================user detail code end=======================================




===========================================Approve leave Queue start=====================================


//  const approveLeave = async (leave) => {
//   try {
//     const { fromDate, toDate, userName } = leave;
//     const start = new Date(fromDate);
//     const end = new Date(toDate);

//     while (start <= end) {
//       const dateStr = start.toISOString().slice(0, 10);
//       const attendanceRef = doc(db, 'allUsers', userName, 'attendance', dateStr);

//       const docSnap = await getDoc(attendanceRef);

//       if (docSnap.exists()) {
        
//         await updateDoc(attendanceRef, {
//           leave: true,
//           present: false, 
//           timestamp: serverTimestamp(),
//         });
//       } else {
        
//         await setDoc(attendanceRef, {
//           date: dateStr,
//           present: false,
//           leave: true,
//           timestamp: serverTimestamp(),
//         });
//       }

//       start.setDate(start.getDate() + 1);
//     }

    
//     const leaveRef = doc(db, 'leaves', leave.id);
//     await updateDoc(leaveRef, {
//       status: 'approved',
//       adminMessage: '',
//       notified: false,
//     });

//     toast.success(`Approved leave for ${leave.userName}`);
//     setLeaves(prev => prev.filter(l => l.id !== leave.id));

   
//     fetchAttendance();

//   } catch (err) {
//     toast.error('Failed to approve leave');
//     console.error(err);
//   }
// };



===========================================Approve leave Queue end=====================================


===========================================Leave form start========================================


// import React, { useState } from 'react';
// import { TextField, Button, Paper, Typography } from '@mui/material';
// import { addDoc, collection, getFirestore } from 'firebase/firestore';
// import { getAuth } from 'firebase/auth';
// import { app } from '../../firebase';
// import { toast } from 'react-toastify';

// const LeaveForm = () => {
//   const [fromDate, setFromDate] = useState('');
//   const [toDate, setToDate] = useState('');
//   const [description, setDescription] = useState('');
//   const [loading, setLoading] = useState(false); // ✅ correct position

//   const auth = getAuth(app);
//   const currentUser = auth.currentUser;

//   const handleLeaveSubmit = async (e) => {
//     e.preventDefault();
//     if (loading) return;

//     setLoading(true);
//     try {
//       const db = getFirestore(app);

//       const leaveData = {
//         fromDate,
//         toDate,
//         description,
//         userId: currentUser.uid,
//         userEmail: currentUser.email,
//         userName: currentUser.displayName || currentUser.email.split('@')[0],
//         dateApplied: new Date().toISOString().slice(0, 10),
//         status: 'pending'
//       };

//       await addDoc(collection(db, 'leaves'), leaveData);
//       toast.success('Leave request submitted for approval!');
      
//       // Clear form
//       setFromDate('');
//       setToDate('');
//       setDescription('');
//     } catch (error) {
//       toast.error('Error applying leave');
//       console.error(error);
//     } finally {
//       setLoading(false);
//     }
//   };

//   return (
//     <Paper sx={{ padding: 3, maxWidth: 500, margin: '2rem auto' }}>
//       <Typography variant="h6" gutterBottom sx={{ textAlign: "center", fontSize: "1.7em" }}>
//         Apply for Leave
//       </Typography>
//       <form onSubmit={handleLeaveSubmit}>
//         <TextField
//           type="date"
//           label="From Date"
//           InputLabelProps={{ shrink: true }}
//           fullWidth
//           value={fromDate}
//           onChange={(e) => setFromDate(e.target.value)}
//           sx={{ mb: 2 }}
//           required
//         />
//         <TextField
//           type="date"
//           label="To Date"
//           InputLabelProps={{ shrink: true }}
//           fullWidth
//           value={toDate}
//           onChange={(e) => setToDate(e.target.value)}
//           sx={{ mb: 2 }}
//           required
//         />
//         <TextField
//           label="Description"
//           fullWidth
//           multiline
//           rows={3}
//           value={description}
//           onChange={(e) => setDescription(e.target.value)}
//           sx={{ mb: 2 }}
//         />
//         <Button
//           sx={{ backgroundColor: "#3388FF" }}
//           type="submit"
//           variant="contained"
//           fullWidth
//           disabled={loading}
//         >
//           Submit Leave
//         </Button>
//       </form>
//     </Paper>
//   );
// };

// export default LeaveForm;



===========================================Leave form end========================================



=============================================App.jsx start ========================================


// import { Route, Routes } from "react-router";
// import { routes } from "./routes";
// import DashboardLayoutNavigationLinks from "./Layout/DashboardLayoutNaviagtionLinks";
// import { ToastContainer } from "react-toastify";
// import 'react-toastify/dist/ReactToastify.css';



// const App = () => {
//   return (
//     <div>
//       <Routes>
//         {routes.map((item, index) => {
//           const routeElement = item.element;
//           const needsLayout = ["/Dashboard","/user/:userId","/LeaveForm","/AdminLeaveQueue","/","/MyAttendance"].includes(item.path);

//           return (
//             <Route
//               key={index}
//               path={item.path}
//               element={
//                 needsLayout ? (
//                   <DashboardLayoutNavigationLinks>{routeElement}</DashboardLayoutNavigationLinks>
//                 ) : (
//                   routeElement
//                 )
//               }
//             />
//           );
//         })}
//       </Routes>

//       <ToastContainer position="top-right" autoClose={3000} />

//     </div>
//   );
// };

// export default App;



=============================================App.jsx end ========================================
